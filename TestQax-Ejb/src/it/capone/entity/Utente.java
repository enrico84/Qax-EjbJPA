package it.capone.entity;
// Generated 22-ago-2017 16.20.01 by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Utente generated by hbm2java
 */
@Entity
@Table(name = "utente", catalog = "qax")
@NamedQueries({
	@NamedQuery(name="Utente.findAll", query="SELECT u FROM Utente u"),
	@NamedQuery(name="Utente.findById", query="SELECT u FROM Utente u WHERE u.idutente = :idutente"),
	@NamedQuery(name="Utente.findByNomePass", query="SELECT u FROM Utente u WHERE u.nome = :nome AND u.password = :password")
})
public class Utente implements java.io.Serializable {

	
	private static final long serialVersionUID = 1L;
	
	private Integer idutente;
	private String password;
	private String nome;
	private String email;
	private Date dataregistrazione;
	private Set<Domanda> domandas = new HashSet<Domanda>(0);
	private Set<Commentodomanda> commentodomandas = new HashSet<Commentodomanda>(0);
	private Set<Commentorisposta> commentorispostas = new HashSet<Commentorisposta>(0);
	private Set<Risposta> rispostas = new HashSet<Risposta>(0);

	public Utente() {
	}

	public Utente(String password, String nome, String email, Date dataregistrazione) {
		this.password = password;
		this.nome = nome;
		this.email = email;
		this.dataregistrazione = dataregistrazione;
	}

	public Utente(String password, String nome, String email, Date dataregistrazione, Set<Domanda> domandas,
			Set<Commentodomanda> commentodomandas, Set<Commentorisposta> commentorispostas, Set<Risposta> rispostas) {
		this.password = password;
		this.nome = nome;
		this.email = email;
		this.dataregistrazione = dataregistrazione;
		this.domandas = domandas;
		this.commentodomandas = commentodomandas;
		this.commentorispostas = commentorispostas;
		this.rispostas = rispostas;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "idutente", unique = true, nullable = false)
	public Integer getIdutente() {
		return this.idutente;
	}

	public void setIdutente(Integer idutente) {
		this.idutente = idutente;
	}

	@Column(name = "password", nullable = false, length = 45)
	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	@Column(name = "nome", nullable = false, length = 45)
	public String getNome() {
		return this.nome;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	@Column(name = "email", nullable = false, length = 45)
	public String getEmail() {
		return this.email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "dataregistrazione", nullable = false, length = 19)
	public Date getDataregistrazione() {
		return this.dataregistrazione;
	}

	public void setDataregistrazione(Date dataregistrazione) {
		this.dataregistrazione = dataregistrazione;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utente")
	public Set<Domanda> getDomandas() {
		return this.domandas;
	}

	public void setDomandas(Set<Domanda> domandas) {
		this.domandas = domandas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utente")
	public Set<Commentodomanda> getCommentodomandas() {
		return this.commentodomandas;
	}

	public void setCommentodomandas(Set<Commentodomanda> commentodomandas) {
		this.commentodomandas = commentodomandas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utente")
	public Set<Commentorisposta> getCommentorispostas() {
		return this.commentorispostas;
	}

	public void setCommentorispostas(Set<Commentorisposta> commentorispostas) {
		this.commentorispostas = commentorispostas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "utente")
	public Set<Risposta> getRispostas() {
		return this.rispostas;
	}

	public void setRispostas(Set<Risposta> rispostas) {
		this.rispostas = rispostas;
	}

}
