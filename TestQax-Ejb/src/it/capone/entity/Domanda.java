package it.capone.entity;
// Generated 22-ago-2017 16.20.01 by Hibernate Tools 4.3.5.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Domanda generated by hbm2java
 */
@Entity
@Table(name = "domanda", catalog = "qax")
@NamedQueries({
	@NamedQuery(name="Domanda.findAll", query="SELECT d FROM Domanda d"),
	@NamedQuery(name="Domanda.findById", query="SELECT d FROM Domanda d WHERE d.iddomanda = :iddomanda"),
	@NamedQuery(name="Domanda.findByCategory", query="SELECT d FROM Domanda d WHERE d.categoria.nome = :categoria"),
	@NamedQuery(name="Domanda.findDomandaRisposte", query="SELECT d, u.idutente, u.nome, r "
										+ "FROM Domanda d, Utente u, Risposta r "
										+ "WHERE d.utente.idutente = u.idutente "
										//+ "AND r.domanda.iddomanda = d.risposta.domanda.iddomanda "
										+ "AND r.domanda.iddomanda = d.iddomanda "
										+ "AND d.iddomanda = :iddomanda"),
	@NamedQuery(name="Domanda.trovaMieDomande", 
				query="SELECT d FROM Domanda d, Utente u WHERE "
						+ "d.utente.idutente = u.idutente AND u.nome = :nome AND u.password = :password")
})
public class Domanda implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer iddomanda;
	private Categoria categoria;
	private Risposta risposta;
	private Utente utente;
	private String titolo;
	private String descrizione;
	private Date datacreazione;
	private Set<Commentodomanda> commentodomandas = new HashSet<Commentodomanda>(0);
	private Set<Risposta> rispostas = new HashSet<Risposta>(0);

	public Domanda() {
	}

	public Domanda(Categoria categoria, String titolo, String descrizione, Date datacreazione) {
		this.categoria = categoria;
		this.titolo = titolo;
		this.descrizione = descrizione;
		this.datacreazione = datacreazione;
	}

	public Domanda(Categoria categoria, Risposta risposta, Utente utente, String titolo, String descrizione,
			Date datacreazione, Set<Commentodomanda> commentodomandas, Set<Risposta> rispostas) {
		this.categoria = categoria;
		this.risposta = risposta;
		this.utente = utente;
		this.titolo = titolo;
		this.descrizione = descrizione;
		this.datacreazione = datacreazione;
		this.commentodomandas = commentodomandas;
		this.rispostas = rispostas;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "iddomanda", unique = true, nullable = false)
	public Integer getIddomanda() {
		return this.iddomanda;
	}

	public void setIddomanda(Integer iddomanda) {
		this.iddomanda = iddomanda;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "categoria", nullable = false)
	public Categoria getCategoria() {
		return this.categoria;
	}

	public void setCategoria(Categoria categoria) {
		this.categoria = categoria;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idrispostascelta")
	public Risposta getRisposta() {
		return this.risposta;
	}

	public void setRisposta(Risposta risposta) {
		this.risposta = risposta;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idutente")
	public Utente getUtente() {
		return this.utente;
	}

	public void setUtente(Utente utente) {
		this.utente = utente;
	}

	@Column(name = "titolo", nullable = false, length = 120)
	public String getTitolo() {
		return this.titolo;
	}

	public void setTitolo(String titolo) {
		this.titolo = titolo;
	}

	@Column(name = "descrizione", nullable = false, length = 65535)
	public String getDescrizione() {
		return this.descrizione;
	}

	public void setDescrizione(String descrizione) {
		this.descrizione = descrizione;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "datacreazione", nullable = false, length = 19)
	public Date getDatacreazione() {
		return this.datacreazione;
	}

	public void setDatacreazione(Date datacreazione) {
		this.datacreazione = datacreazione;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "domanda")
	public Set<Commentodomanda> getCommentodomandas() {
		return this.commentodomandas;
	}

	public void setCommentodomandas(Set<Commentodomanda> commentodomandas) {
		this.commentodomandas = commentodomandas;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "domanda")
	public Set<Risposta> getRispostas() {
		return this.rispostas;
	}

	public void setRispostas(Set<Risposta> rispostas) {
		this.rispostas = rispostas;
	}

}
